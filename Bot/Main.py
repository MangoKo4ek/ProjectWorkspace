import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from Config import TOKEN

logging.basicConfig(
    format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s] %(message)s',
    level=logging.INFO
)

bot = Bot(token=TOKEN)
dp = Dispatcher()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


def extract_vacancy_info(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö.
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ (–≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—ã—á–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏)
    blocks = re.split(r"\n\s*\n", text.strip())

    vacancies = []

    for block in blocks:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        title_match = re.search(r"^(.+?)\n", block)
        title = title_match.group(1).strip() if title_match else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
        salary_match = re.search(r"–∑–∞—Ä–ø–ª–∞—Ç[–∞-—è]*\s*[:‚Äì-]?\s*([\d\s‚ÇΩ—Ä—É–±\.]+)", block, re.IGNORECASE)
        salary = salary_match.group(1).strip() if salary_match else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã (email)
        contacts_match = re.search(r"–ö–æ–Ω—Ç–∞–∫—Ç—ã:\s*([\w.-]+@[\w.-]+\.\w+)", block, re.IGNORECASE)
        contacts = contacts_match.group(1).strip() if contacts_match else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        vacancy_info = {
            "title": title,
            "salary": salary,
            "contacts": contacts,
            "description": block.strip(),
        }
        vacancies.append(vacancy_info)

    return vacancies


@dp.message()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_group_message(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    vacancies = extract_vacancy_info(message.text)

    if vacancies:
        for vacancy in vacancies:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = (
                f"üìå –í–∞–∫–∞–Ω—Å–∏—è: {vacancy['title']}\n"
                f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']}\n"
                f"üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã: {vacancy['contacts']}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{vacancy['description']}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(response)
    else:
        await message.answer("–í–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")